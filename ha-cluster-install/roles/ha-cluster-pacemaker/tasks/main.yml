---
- name: Check if cluster consist of at least 2 nodes
  fail: msg="Cluster must have at least 2 members"
  when: play_hosts|count() < 2
  run_once: true

- name: Include distribution version specific variables
  include_vars: "el{{ ansible_distribution_major_version }}.yml"

#TODO repos enabled maybe
#- name: (RHEL only) enable repositories
#  include: rhel_repos.yml
#  when: ansible_distribution == 'RedHat'
#
#- name: Install packages from local media
#  include: install_local_media.yml
#  when: use_local_media == true
#
- name: Install packages from system defined repositories
  include: packages.yml
  when: use_local_media != true

# TODO allow to choose if to use FQDN or just short hostname, defaulting to short hostname
# WARNING: the 'ansible_fqdn' is resolved from /etc/hosts file! If you change hostname
# of machine through /etc/hosts the ansible will pick it up and use it!
#- name: Add hosts to /etc/hosts
#  lineinfile:
#  args:
#    dest: '/etc/hosts'
#    regexp: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} "
#    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_fqdn'].split('.')[0] }}"
#  with_items: "{{ play_hosts }}"

- name: Create cluster system group
  group:
    name: {{ cluster_group }}
    state: present

- name: Create cluster system user
  user: 
    name: {{ cluster_user }}
    state: present
    password: {{ cluster_user_pass | password_hash('sha512', ansible_hostname|replace('-','x')) }}
    groups: {{ cluster_group }}
    comment: "HA Cluster Administrator"

# TODO maybe separate to service and systemd
- name: Enable and start PCSD service
  service:
    name: pcsd
    enabled: yes
    state: started

- name: Setup firewall for RHEL/CentOS 6 systems (iptables)
  include: firewall-el6.yml
  when: ansible_distribution_major_version == "6" and cluster_firewall == true

- name: Setup firewall for RHEL/CentOS 7 systems (firewalld)
  include: firewall-el7.yml
  when: ansible_distribution_major_version == "7" and cluster_firewall == true

#- name: Authorize cluster nodes
#  pcs_auth: node_name={{ hostvars[item]['ansible_fqdn'].split('.')[0] }} username={{ cluster_user }} password={{ cluster_user_pass }}
#  with_items: '{{ play_hosts }}'
#
#- name: Setup cluster
#  pcs_cluster: node_list="{% for item in play_hosts %}{{ hostvars[item]['ansible_hostname'] }} {% endfor %}" cluster_name="{{ cluster_name }}"
#  run_once: true

- name: Authenticate all nodes
  command: >
    pcs cluster auth
    {% for host in play_hosts %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
    -u {{ cluster_user }} -p {{ cluster_user_pass }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens

- name: Setup cluster
  run_once: true
  command: >
    pcs cluster setup --name {{ cluster_name }}
    {% for host in play_hosts %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
  run_once: true
  args:
    creates: /etc/corosync/corosync.conf

- name: Start cluster services on all nodes
  service:
    name: {{ item }}
    state: started
  with_items:
    - pacemaker 
    - corosync

- name: Enable cluster services on boot
  service:
    name: {{ item }}
    enabled: yes
  when: cluster_enable_service == true
  with_items:
    - pacemaker 
    - corosync

- name: Set cluster properties
  command: pcs property set {{ item.key | replace('_', '-') }}={{ item.value }}
  with_dict: "{{ pacemaker_properties }}"
  run_once: true
  when: pacemaker_properties is defined

- name: Set cluster properties
  command: pcs property set no-quorum-policy=ignore
  with_dict: "{{ pacemaker_properties }}"
  run_once: true
  when: play_hosts|count() == 2

- name: Create resources
  run_once: true
  with_items: "{{ pacemaker_resources }}"
  command: >
    pcs resource create {{ item.id }} {{ item.type }}
    {% if item.options is defined %}
      {% for opt, value in item.options.iteritems() %}
        {{ opt }}={{ value }}
      {% endfor %}
    {% endif %}
    {% if item.op is defined %}
      op
      {% for op in item.op %}
        {{ op.action }}
        {% for opt, value in op.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {% if item.meta is defined %}
      meta {{ item.meta.id }}
      {% if item.meta.options is defined %}
        {% for opt, value in item.meta.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endif %}
    {% endif %}
    {% if item.clone is defined %}
      {% if item.clone %} --clone {% endif %}
    {% elif item.masterslave is defined %}
      --master
      {% if item.masterslave.name is defined %}
        {{ item.masterslave.name }}
      {% endif %}
    {% elif item.group is defined %}
      --group {{ item.group.name }}
      {% if item.group.before is defined %}
        --before {{ item.group.before }}
      {% elif item.group.after is defined %}
        --after {{ item.group.after }}
      {% endif %}
    {% endif %}
    {% if item.disabled is defined %}
      {% if item.disabled %} --disabled {% endif %}
    {% endif %}
    {% if item.wait is defined %}
      wait={{ item.wait }}
    {% endif %}
  when: pacemaker_resources is defined

### fencing setup
#- name: Setup automatic fence_xvm
#  include: fence_xvm.yml
#  when: cluster_configure_fence_xvm is defined and cluster_configure_fence_xvm == true
#
#- name: Setup fence_kdump
#  include: fence_kdump.yml
#  when: cluster_configure_fence_kdump is defined and cluster_configure_fence_kdump == true
#
#- name: Setup custom fence devices
#  include: fence_custom.yml
