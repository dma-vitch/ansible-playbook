---
# tasks file for ambari-metrics

- name: "Ambari-Metrics | Cleaning task for yum"
  command: /usr/bin/yum clean all

- name: "Ambari-Metrics | Stop ambari-metrics"
  uri:
    url: "http://{{ ambari_server |default(hostvars[groups['ambari-nodes'][0]]['inventory_hostname']) }}:{{ ambari_server_port |default('8080') }}/api/v1/clusters/{{ ambari_cluster_name }}/services/AMBARI_METRICS"
    user: "{{ ambari_user | default('admin') }}"
    password: "{{ ambari_passwd | default('admin') }}"
    #HEADER_X-Requested-By: "ambari"
    headers:
      X-Requested-By: "ambari"
    method: PUT
    body: '{ "RequestInfo" : { "context" : "Stop AMBARI_METRICS via REST"}, "Body" : { "ServiceInfo" : { "state" : "INSTALLED" } } }'
    force_basic_auth: yes
  run_once: true
  register: stop_command_result
  failed_when: stop_command_result.status not in [202, 200]
  changed_when: stop_command_result.status == 202

- name: "Ambari-Metrics | Wait for stopping ambari-metrics"
  uri:
    url: "http://{{ ambari_server |default(hostvars[groups['ambari-nodes'][0]]['inventory_hostname']) }}:{{ ambari_server_port |default('8080') }}/api/v1/clusters/{{ ambari_cluster_name }}/services/AMBARI_METRICS"
    user: "{{ ambari_user | default('admin') }}"
    password: "{{ ambari_passwd | default('admin') }}"
    #HEADER_X-Requested-By: "ambari"
    headers:
      X-Requested-By: "ambari"
    method: GET
    return_content: yes
    force_basic_auth: yes
    #body_format: json
  register: wait_stop_result
  run_once: true
  until: (wait_stop_result.content | from_json).ServiceInfo.state == "INSTALLED"
  retries: 10
  delay: 25

- name: "Ambari-Metrics | Ensure upgrade ambari-metrics-collector"
  yum:
    name: ambari-metrics-collector
    update_cache: yes
    state: latest
  when: inventory_hostname == groups['ambari-nodes'][1]

- name: "Ambari-Metrics | Ensure required packages are installed"
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: latest
  with_items:
    - ambari-metrics-monitor
    - ambari-metrics-hadoop-sink

- name: "Ambari-Metrics | Ensure upgrade ambari-metrics-grafana"
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: latest
  with_items:
    - ambari-metrics-grafana
  when: inventory_hostname == groups['ambari-nodes'][1]
  tags:
    - grafana

- name: "Ambari-Metrics | Start ambari-metrics"
  uri:
    url: "http://{{ ambari_server |default(hostvars[groups['ambari-nodes'][0]]['inventory_hostname']) }}:{{ ambari_server_port |default('8080') }}/api/v1/clusters/{{ ambari_cluster_name }}/services/AMBARI_METRICS"
    user: "{{ ambari_user | default('admin') }}"
    password: "{{ ambari_passwd | default('admin') }}"
    #HEADER_X-Requested-By: "ambari"
    headers:
      X-Requested-By: "ambari"
    method: PUT
    body: '{ "RequestInfo" : { "context" : "Start AMBARI_METRICS via REST"}, "Body" : { "ServiceInfo" : { "state" : "STARTED" } } }'
    force_basic_auth: yes
  register: start_command_result
  run_once: true
  failed_when: start_command_result.status not in [202, 200]
  changed_when: start_command_result.status == 202

- name: "Ambari-Metrics | Wait for started ambari-metrics"
  uri:
    url: "http://{{ ambari_server |default(hostvars[groups['ambari-nodes'][0]]['inventory_hostname']) }}:{{ ambari_server_port |default('8080') }}/api/v1/clusters/{{ ambari_cluster_name }}/services/AMBARI_METRICS"
    user: "{{ ambari_user | default('admin') }}"
    password: "{{ ambari_passwd | default('admin') }}"
    #HEADER_X-Requested-By: "ambari"
    headers:
      X-Requested-By: "ambari"
    method: GET
    return_content: yes
    force_basic_auth: yes
  register: wait_start_result
  run_once: true
  until: (wait_start_result.content | from_json).ServiceInfo.state == "STARTED"
  retries: 10
  delay: 25
